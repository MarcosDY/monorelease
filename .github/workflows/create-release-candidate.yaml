name: Create Release Candidate
description: Creates dev builds and release candidates for releasable components

on:
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to build'
        required: true
        type: choice
        options:
          - foo-test
          - bar-test
          - baz-test
      type:
        description: 'Type of build'
        required: false
        default: 'rc'
        type: choice
        options:
          - dev
          - rc
      version:
        description: 'Next version to release, only required for rc'
        required: false
        type: string
      commit_sha:
        description: 'Git commit SHA to create the RC from'
        required: false
        type: string

permissions:
  actions: write # Used by catchpoint/workflow-telemetry-action and to trigger action on documentation repo
  id-token: write # This is required for requesting the JWT
  contents: write # This is required for uploading to GitHub Releases
  issues: read # This is required for fetching PRs
  pull-requests: write # This is required for creating the helm version PR
  packages: write # This is required for uploading to GitHub Packages

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      components: ${{ steps.set-components.outputs.components }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: main
          fetch-depth: 0   # Fetch all commits in case we want to create a release candidate from a previous commit
      - name: Commit SHA must be on main branch
        if: inputs.type == 'rc'
        run: |
          if git merge-base --is-ancestor "${{ inputs.commit_sha || github.sha }}" HEAD; then
            echo "Commit SHA is on the main branch."
          else
            echo "Release candidates must be created on the main branch."
            exit 1
          fi
      - name: Set components
        id: set-components
        run: |
          if [[ "${{ inputs.component }}" == "foo-test" ]]; then
            echo 'components=["foo-test", "baz-test"]' >> "$GITHUB_OUTPUT"
          elif [[ "${{ inputs.component }}" == "bar-test" ]]; then
            echo 'components=["bar-test"]' >> "$GITHUB_OUTPUT"
          else
            echo 'components=["${{ inputs.component }}"]' >> "$GITHUB_OUTPUT"
          fi
      - name: Create and push tag
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ('${{ inputs.type }}' !== 'rc') {
              console.log('Skipping tag creation for non-rc type');
              return;
            }

            if ('${{inputs.version}}' === '') {
              core.setFailed('Version input is required for rc type');
              return;
            }

            const semverRE = /^(\d+)\.(\d+)\.(\d+)$/;
            if (!semverRE.test('${{inputs.version}}')) {
              core.setFailed('Version input invalid (want a semver number, eg "0.1.0")');
              return;
            }

            // Find all tags with the same pattern
            const { data: existingTags } = await github.rest.git.listMatchingRefs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/${{ inputs.component }}-v${{ inputs.version }}'
            });

            const releaseTagExists = existingTags.some(tag => tag.ref === `refs/tags/${{ inputs.component }}-v${{ inputs.version }}`);
            if (releaseTagExists) {
              core.setFailed(`Release tag refs/tags/${{ inputs.component}}-v${{inputs.version}} already exists, cannot create a release candidate`);
              return;
            }

            let rcNum = 1; // Default to 1 if no existing tags are found
            if (existingTags.length > 0) {
              rcNum = existingTags
                .map(tag => {
                  const match = tag.ref.match(/-rc(\d+)$/);
                  return match ? parseInt(match[1], 10) : 0;
                })
                .reduce((max, num) => Math.max(max, num), 0) + 1;
            }

            const tagName = "${{ inputs.component }}-v${{ inputs.version }}-rc" + rcNum;

            let sha = context.sha;
            if ('${{ inputs.commit_sha }}' !== '') {
              sha = '${{ inputs.commit_sha }}';
            }

            try {
              // Create a tag reference using the GitHub API
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tagName}`,
                sha: sha
              });

              console.log(`Successfully created tag: ${tagName}`);
            } catch (error) {
              core.setFailed(`Failed to create tag: ${error.message}`);
            }

  run-goreleaser:
    strategy:
      matrix:
        component: ${{ fromJSON(needs.setup.outputs.components) }}
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ inputs.commit_sha || github.sha }}
          fetch-depth: 0

      - name: Setup bazel
        uses: ./.github/actions/setup-bazel
        with:
          # buildbuddy_api_key: ${{ secrets.BUILDBUDDY_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU # Required for building images with goreleaser in multi-platform mode.
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6.3.0
        with:
          distribution: goreleaser-pro
          # version: 2.10.2
          args: release -f ./${{ matrix.component }}/.goreleaser.yaml --parallelism 1 ${{ inputs.type == 'dev' && '--nightly' || ''}}
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
